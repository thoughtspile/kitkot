buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.61'
    id 'com.github.johnrengelman.shadow' version "5.2.0"
    id 'application'
}

application {
    group = 'example'
    mainClassName = 'io.ktor.server.netty.EngineMain'
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
}

kotlin {
    jvm()
    jvmJar {
        manifest {
            attributes 'Main-Class': mainClassName
        }
    }
    js {
        browser {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "io.ktor:ktor-server-core:$ktor_version"
                implementation "io.ktor:ktor-server-host-common:$ktor_version"
                implementation "io.ktor:ktor-server-sessions:$ktor_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "io.ktor:ktor-auth:$ktor_version"
                implementation "io.ktor:ktor-gson:$ktor_version"
                implementation "io.ktor:ktor-serialization:$ktor_version"
                implementation "io.ktor:ktor-auth-jwt:$ktor_version"
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-auth-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-gson:$ktor_version"
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version" // JVM dependency
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}


task devClient(type: Exec) {
    workingDir "./src/jsMain"
    commandLine 'yarn'
    commandLine 'yarn', 'start'
}

task buildClient(type: Exec) {
    workingDir "./src/jsMain"
    commandLine 'yarn'
    commandLine 'yarn', 'build'
    doLast {
        copy {
            from "$projectDir/src/jsMain/build"
            into "$projectDir/src/jvmMain/resources/client"
        }
    }
}

task runServer(type: JavaExec) {
    group = "application"
    main = 'sample.ApplicationKt'
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}

tasks.findByName('jsBrowserWebpack').enabled(false)
compileKotlinJs {
    enabled = false
    dependsOn 'buildClient'
}

task runWithClient {
    dependsOn 'buildClient'
    dependsOn 'runServer'
    tasks.findByName('runServer').mustRunAfter 'buildClient'
}


shadowJar {
    dependsOn 'buildClient'
    dependsOn 'jvmJar'
    tasks.findByName('jvmJar').mustRunAfter 'buildClient'

    from tasks.findByName('jvmJar').archiveFile
    configurations = [project.configurations.jvmRuntimeClasspath]
    manifest {
        attributes 'Main-Class': mainClassName
    }
}
